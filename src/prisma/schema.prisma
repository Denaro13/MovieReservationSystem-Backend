// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id                Int      @id @default(autoincrement())
  name              String
  password          String   
  email             String   @unique
  role              Role   @default(USER)
  reservations      Reservation[]
  createdAt         DateTime @default(now())

  @@map("users")
}

model Movie {
  id              Int     @id @default(autoincrement())
  title           String
  description     String
  movieLength     Int     @default(0)
  genre           Genre   @relation(fields: [genreId], references: [id])
  genreId         Int
  showTimes       ShowTime[]

@@map("movies")
}

model Genre {
  id            Int     @id @default(autoincrement())
  name          String  @unique
  movies        Movie[] 
  
  @@map("genres")
}

model ShowTime {
  id            Int     @id @default(autoincrement())
  date          String  
  startTime     String  
  endTime       String  
  movieId       Int
  movie         Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)
  seats         Seat[]
  reservations  Reservation[]

  @@map("showtimes")
}

model Seat {
  id                  Int     @id @default(autoincrement())
  seatNumber          String
  isAvailable         Boolean @default(true)
  showTime            ShowTime @relation(fields: [showTimeId], references: [id], onDelete: Cascade)
  showTimeId          Int
  isResearved         Boolean  @default(false)
  reservation         Reservation? @relation(fields: [reservationId], references: [id])
  reservationId       Int?      

 @@map("seats") 
}

model Reservation {
  id                  Int        @id @default(autoincrement())
  user                User       @relation(fields: [userId], references: [id])
  userId              Int
  showtime            ShowTime   @relation(fields: [showtimeId], references: [id], onDelete: Cascade)
  showtimeId          Int
  // seatId              Int
  seats               Seat[]
  reservedAt          DateTime   @default(now())
  status              ReservationStatus @default(ACTIVE)

  @@map("reservations")
}

enum Role {
USER 
ADMIN
}

enum ReservationStatus {
  ACTIVE     
  CANCELLED
}